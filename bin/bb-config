#!/usr/bin/env ruby

require 'json'
require 'os'

PLATFORM = if ARGV.include?('--emscripten')
  'emscripten'
elsif OS.mac?
  'macos'
elsif OS.linux?
  'linux'
end

RUNTIME = if ARGV.include?('--test')
  'test'
else
  'opengl'
end

BB_ENV = `_release/bin/blitzcc -e`.strip

INCLUDE_PATH = File.expand_path(File.join(File.dirname(__FILE__), '..', 'src', 'modules'))
TOOLCHAINS_PATH = File.expand_path(File.join(File.dirname(__FILE__), '..', '_release', 'toolchains'))

IDENTIFIER_REGEX = /[A-Za-z0-9]+/

config = Dir.glob(File.join(TOOLCHAINS_PATH, PLATFORM, 'cfg', "*.#{BB_ENV}.i")).inject({}) do |cfg, path|
  interface = File.open(path).read
  _, id      = interface.match(/^ID:(.*)$/).to_a.map(&:strip)
  _, modules = interface.match(/^MODULES:(.*)$/).to_a.map(&:strip)
  _, libs    = interface.match(/^LIBS:(.*)$/).to_a.map(&:strip)

  cfg[id] = {
    modules: modules.strip.split(';'),
    libs: libs.strip.split(';')
  }
  cfg
end

OPTIONS = if PLATFORM == 'emscripten'
  ['-s LEGACY_GL_EMULATION=1']
else
  []
end

if BB_ENV == 'test'
  OPTIONS << '-fprofile-arcs -ftest-coverage -O0'
end

runtime = YAML.load(File.open(File.expand_path(File.join(File.dirname(__FILE__), '..', 'src', 'runtime', RUNTIME, 'runtime.yml'))))

imported_modules = []

runtime['modules'].each do |mod|
  imported_modules << "bb.#{mod}"
  next if config["bb.#{mod}"].nil?

  imported_modules += config["bb.#{mod}"][:modules]
end

module_libs = []
system_libs = []

config.each_pair do |id, mod|
  next unless imported_modules.include?(id)

  module_libs << "-l#{id}"

  system_libs << mod[:libs].map do |lib|
    if lib =~ /^-framework/
      lib
    else
      "-l#{lib}"
    end
  end
end

module_libs.flatten!
system_libs.flatten!

puts "-Wno-int-conversion #{OPTIONS.join(' ')} -I#{INCLUDE_PATH} -DBBMAIN -L#{File.join(TOOLCHAINS_PATH, PLATFORM, 'lib', BB_ENV)} -lbb.stub -lruntime.#{RUNTIME} #{module_libs.join(' ')} #{module_libs.reverse.join(' ')} #{system_libs.join(' ')}"
