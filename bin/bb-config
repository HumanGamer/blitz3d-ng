#!/usr/bin/env ruby

require 'json'
require 'os'

PLATFORM = if ARGV.include?('--emscripten')
  'emscripten'
elsif OS.mac?
  'macos'
elsif OS.linux?
  'linux'
end

RUNTIME = if ARGV.include?('--test')
  'test'
else
  'opengl'
end

INCLUDE_PATH = File.expand_path(File.join(File.dirname(__FILE__), '..', 'src', 'runtime'))
LIB_PATH = File.expand_path(File.join(File.dirname(__FILE__), '..', '_release', 'lib'))

IDENTIFIER_REGEX = /[A-Za-z0-9]+/

configs = Dir.glob(File.join(LIB_PATH, '*/*.config.json')).inject({}) do |cfgs, path|
  _, platform, rt = path.match(/(#{IDENTIFIER_REGEX})\/(#{IDENTIFIER_REGEX})\.config\.json$/).to_a
  cfgs[platform] ||= {}
  cfgs[platform][rt] = JSON.parse(File.open(path).read)
  cfgs
end

if configs[PLATFORM].nil?
  $stderr.puts "No runtimes for #{PLATFORM}."
  exit 1
end

OPTIONS = if PLATFORM == 'emscripten'
  ['-s LEGACY_GL_EMULATION=1']
else
  []
end

if `_release/bin/blitzcc -e`.strip == 'test'
  OPTIONS << '-fprofile-arcs -ftest-coverage -O0'
end

config = configs[PLATFORM][RUNTIME] || configs[PLATFORM].first[0]

module_libs = []
system_libs = []

libs = config['modules'].map do |mod|
  module_libs << "-lbb.#{mod['id']}"

  system_libs << mod['links'].map do |lib|
    if lib =~ /(.*)\.framework$/
      "-framework #{$1}"
    else
      "-l#{lib}"
    end
  end.flatten
end


puts "-Wno-int-conversion #{OPTIONS.join(' ')} -I#{INCLUDE_PATH} -DBBMAIN -L#{File.join(LIB_PATH, PLATFORM)} -lbb.stub -lruntime.#{RUNTIME} #{module_libs.join(' ')} #{module_libs.join(' ')} #{system_libs.join(' ')}"
